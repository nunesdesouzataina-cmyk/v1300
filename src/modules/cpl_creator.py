
"""
Protocolo Integrado de Cria√ß√£o de CPLs Devastadores - V3.0
Implementa√ß√£o completa das 5 fases do protocolo CPL
"""

import os
import json
import time
import asyncio
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass, asdict
from datetime import datetime
import logging
# Imports condicionais para evitar erros de depend√™ncia
try:
    from enhanced_api_rotation_manager import get_api_manager
    HAS_API_MANAGER = True
except ImportError:
    HAS_API_MANAGER = False

try:
    from massive_social_search_engine import get_search_engine
    HAS_SEARCH_ENGINE = True
except ImportError:
    HAS_SEARCH_ENGINE = False

logger = logging.getLogger(__name__)

@dataclass
class ContextoEstrategico:
    tema: str
    segmento: str
    publico_alvo: str
    termos_chave: List[str]
    frases_busca: List[str]
    objecoes: List[str]
    tendencias: List[str]
    casos_sucesso: List[str]

@dataclass
class EventoMagnetico:
    nome: str
    promessa_central: str
    arquitetura_cpls: Dict[str, str]
    mapeamento_psicologico: Dict[str, str]
    justificativa: str

@dataclass
class CPLDevastador:
    numero: int
    titulo: str
    objetivo: str
    conteudo_principal: str
    loops_abertos: List[str]
    quebras_padrao: List[str]
    provas_sociais: List[str]
    elementos_cinematograficos: List[str]
    gatilhos_psicologicos: List[str]
    call_to_action: str

class CPLDevastadorProtocol:
    """
    Protocolo completo para cria√ß√£o de CPLs devastadores
    Segue rigorosamente as 5 fases definidas no protocolo
    """
    
    def __init__(self):
        if HAS_API_MANAGER:
            self.api_manager = get_api_manager()
        else:
            self.api_manager = None
            
        if HAS_SEARCH_ENGINE:
            self.search_engine = get_search_engine()
        else:
            self.search_engine = None
            
        self.session_data = {}
    
    def definir_contexto_busca(self, tema: str, segmento: str, publico_alvo: str) -> ContextoEstrategico:
        """
        FASE PR√â-BUSCA: Defini√ß√£o do Contexto Estrat√©gico
        Prepara o contexto estrat√©gico para busca web
        """
        logger.info(f"üéØ Definindo contexto estrat√©gico: {tema} | {segmento} | {publico_alvo}")
        
        prompt = f"""
        Analise o tema \'{tema}\' no segmento \'{segmento}\' para o p√∫blico \'{publico_alvo}\' e gere:
        1. 10 termos-chave ESPEC√çFICOS que os profissionais usam (n√£o gen√©ricos)
        2. 5 frases EXATAS que o p√∫blico busca no Google
        3. 3 obje√ß√µes PRIM√ÅRIAS que o p√∫blico tem
        4. 2 tend√™ncias REAIS que est√£o mudando o mercado
        5. 3 casos de sucesso RECENTES (√∫ltimos 6 meses)
        
        Formato JSON: {{"termos_chave": [], "frases_busca": [], "objecoes": [], "tendencias": [], "casos_sucesso": []}}
        
        IMPORTANTE: Use apenas dados REAIS e ESPEC√çFICOS. Nada gen√©rico ou simulado.
        """
        
        try:
            # Usar API principal (Qwen) ou fallback (Gemini)
            api = self.api_manager.get_active_api('qwen')
            if not api:
                _, api = self.api_manager.get_fallback_model('qwen')
            
            if not api:
                raise Exception("Nenhuma API dispon√≠vel para gera√ß√£o de contexto")
            
            # Gerar contexto usando IA
            contexto_raw = self._generate_with_ai(prompt, api)
            contexto_data = json.loads(contexto_raw)
            
            contexto = ContextoEstrategico(
                tema=tema,
                segmento=segmento,
                publico_alvo=publico_alvo,
                termos_chave=contexto_data.get('termos_chave', []),
                frases_busca=contexto_data.get('frases_busca', []),
                objecoes=contexto_data.get('objecoes', []),
                tendencias=contexto_data.get('tendencias', []),
                casos_sucesso=contexto_data.get('casos_sucesso', [])
            )
            
            logger.info("‚úÖ Contexto estrat√©gico definido")
            return contexto
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao definir contexto: {e}")
            raise
    
    async def executar_protocolo_completo(self, tema: str, segmento: str, publico_alvo: str, session_id: str) -> Dict[str, Any]:
        """
        Executa o protocolo completo de 5 fases para cria√ß√£o de CPLs devastadores
        """
        try:
            logger.info("üöÄ INICIANDO PROTOCOLO DE CPLs DEVASTADORES")
            logger.info(f"üéØ Tema: {tema} | {segmento} | P√∫blico: {publico_alvo}")
            
            # FASE 0: Prepara√ß√£o do contexto
            contexto = self.definir_contexto_busca(tema, segmento, publico_alvo)
            
            # FASE 1: Coleta de dados contextuais
            logger.info("üîç FASE 1: Coletando dados contextuais com busca massiva")
            search_results = await self.search_engine.massive_search(
                query=f"{tema} {segmento} {publico_alvo}",
                platforms=['instagram', 'youtube', 'facebook'],
                min_engagement=100,
                max_results=1000
            )
            
            # Salvar dados coletados
            self._salvar_dados_contextuais(session_id, search_results, contexto)
            
            # Validar se os dados s√£o suficientes
            if not self._validar_dados_coletados(session_id):
                raise Exception("Dados insuficientes coletados")
            
            # FASE 2: Gerar arquitetura do evento magn√©tico
            logger.info("üß† FASE 2: Gerando arquitetura do evento magn√©tico")
            evento_magnetico = await self._fase_1_arquitetura_evento(session_id, contexto)
            
            # FASE 3: Gerar CPL1 - A Oportunidade Paralisante
            logger.info("üé¨ FASE 3: Gerando CPL1 - A Oportunidade Paralisante")
            cpl1 = await self._fase_2_cpl1_oportunidade(session_id, contexto, evento_magnetico)
            
            # FASE 4: Gerar CPL2 - A Transforma√ß√£o Imposs√≠vel
            logger.info("üé¨ FASE 4: Gerando CPL2 - A Transforma√ß√£o Imposs√≠vel")
            cpl2 = await self._fase_3_cpl2_transformacao(session_id, contexto, cpl1)
            
            # FASE 5: Gerar CPL3 - O Caminho Revolucion√°rio
            logger.info("üé¨ FASE 5: Gerando CPL3 - O Caminho Revolucion√°rio")
            cpl3 = await self._fase_4_cpl3_caminho(session_id, contexto, cpl2)
            
            # FASE 6: Gerar CPL4 - A Decis√£o Inevit√°vel
            logger.info("üé¨ FASE 6: Gerando CPL4 - A Decis√£o Inevit√°vel")
            cpl4 = await self._fase_5_cpl4_decisao(session_id, contexto, cpl3)
            
            # Compilar resultado final
            resultado_final = {
                'session_id': session_id,
                'contexto_estrategico': asdict(contexto),
                'evento_magnetico': asdict(evento_magnetico),
                'cpls': {
                    'cpl1': asdict(cpl1),
                    'cpl2': asdict(cpl2),
                    'cpl3': asdict(cpl3),
                    'cpl4': asdict(cpl4)
                },
                'dados_busca': search_results.__dict__,
                'timestamp': datetime.now().isoformat()
            }
            
            # Salvar resultado final
            self._salvar_resultado_final(session_id, resultado_final)
            
            logger.info("üéâ PROTOCOLO DE CPLs DEVASTADORES CONCLU√çDO!")
            return resultado_final
            
        except Exception as e:
            logger.error(f"‚ùå ERRO CR√çTICO no protocolo de CPLs: {str(e)}")
            raise
    
    async def _fase_1_arquitetura_evento(self, session_id: str, contexto: ContextoEstrategico) -> EventoMagnetico:
        """
        FASE 1: ARQUITETURA DO EVENTO MAGN√âTICO
        """
        prompt = f"""
        # PROTOCOLO DE GERA√á√ÉO DE CPLs DEVASTADORES - FASE 1
        
        ## CONTEXTO
        Voc√™ √© o n√∫cleo estrat√©gico do sistema ARQV30 Enhanced v3.0. Sua miss√£o √© criar um EVENTO MAGN√âTICO devastador que mova o avatar da paralisia para a a√ß√£o obsessiva.
        
        ## DADOS DE ENTRADA
        - Tema: {contexto.tema}
        - Segmento: {contexto.segmento}
        - P√∫blico: {contexto.publico_alvo}
        - Termos-chave: {', '.join(contexto.termos_chave)}
        - Obje√ß√µes principais: {', '.join(contexto.objecoes)}
        - Tend√™ncias: {', '.join(contexto.tendencias)}
        - Casos de sucesso: {', '.join(contexto.casos_sucesso)}
        
        ## REGRAS FUNDAMENTAIS
        1. NUNCA use linguagem gen√©rica - cada palavra deve ser calculada para gerar FOMO visceral
        2. SEMPRE cite dados espec√≠ficos coletados (n√∫meros, frases exatas, casos reais)
        3. CADA fase deve preparar a pr√≥xima com loops abertos e antecipa√ß√£o insuport√°vel
        4. TODAS as promessas devem ser ESPEC√çFICAS com n√∫meros e prazos reais
        5. NENHUMA obje√ß√£o pode permanecer sem destrui√ß√£o sistem√°tica
        
        ## TAREFA: ARQUITETURA DO EVENTO MAGN√âTICO
        
        Crie 3 vers√µes de evento:
        
        ### VERS√ÉO A: AGRESSIVA/POLARIZADORA
        - Nome magn√©tico (m√°x 5 palavras)
        - Promessa central paralisante
        - Justificativa psicol√≥gica
        - Arquitetura dos 4 CPLs
        
        ### VERS√ÉO B: ASPIRACIONAL/INSPIRADORA  
        - Nome magn√©tico (m√°x 5 palavras)
        - Promessa central paralisante
        - Justificativa psicol√≥gica
        - Arquitetura dos 4 CPLs
        
        ### VERS√ÉO C: URGENTE/ESCASSA
        - Nome magn√©tico (m√°x 5 palavras)
        - Promessa central paralisante
        - Justificativa psicol√≥gica
        - Arquitetura dos 4 CPLs
        
        Para cada vers√£o, desenvolva:
        1. 10 nomes magn√©ticos com justificativa psicol√≥gica
        2. Promessa central paralisante com estrutura definida
        3. Arquitetura completa dos 4 CPLs com mapeamento psicol√≥gico
        
        Formato JSON:
        {{
            "versao_escolhida": "A/B/C",
            "nome_evento": "Nome Final",
            "promessa_central": "Promessa espec√≠fica",
            "arquitetura_cpls": {
                "cpl1": "T√≠tulo e objetivo",
                "cpl2": "T√≠tulo e objetivo", 
                "cpl3": "T√≠tulo e objetivo",
                "cpl4": "T√≠tulo e objetivo"
            },
            "mapeamento_psicologico": {
                "gatilho_principal": "Descri√ß√£o",
                "jornada_emocional": "Mapeamento",
                "pontos_pressao": ["Lista de pontos"]
            },
            "justificativa": "Por que esta vers√£o √© devastadora"
        }}
        
        IMPORTANTE: Use apenas dados REAIS dos contextos fornecidos. Nada gen√©rico!
        """
        
        try:
            api = self.api_manager.get_active_api('qwen')
            if not api:
                _, api = self.api_manager.get_fallback_model('qwen')
            
            response = self._generate_with_ai(prompt, api)
            evento_data = json.loads(response)
            
            evento = EventoMagnetico(
                nome=evento_data['nome_evento'],
                promessa_central=evento_data['promessa_central'],
                arquitetura_cpls=evento_data['arquitetura_cpls'],
                mapeamento_psicologico=evento_data['mapeamento_psicologico'],
                justificativa=evento_data['justificativa']
            )
            
            # Salvar fase 1
            self._salvar_fase(session_id, 1, evento_data)
            
            logger.info("‚úÖ FASE 1 conclu√≠da: Arquitetura do Evento Magn√©tico")
            return evento
            
        except Exception as e:
            logger.error(f"‚ùå Erro na Fase 1: {e}")
            raise
    
    async def _fase_2_cpl1_oportunidade(self, session_id: str, contexto: ContextoEstrategico, evento: EventoMagnetico) -> CPLDevastador:
        """
        FASE 2: CPL1 - A OPORTUNIDADE PARALISANTE
        """
        prompt = f"""
        # PROTOCOLO DE GERA√á√ÉO DE CPLs DEVASTADORES - FASE 2: CPL1
        
        ## CONTEXTO DO EVENTO
        - Nome: {evento.nome}
        - Promessa: {evento.promessa_central}
        - Objetivo CPL1: {evento.arquitetura_cpls.get('cpl1', '')}
        
        ## DADOS CONTEXTUAIS
        - Obje√ß√µes reais: {', '.join(contexto.objecoes)}
        - Casos de sucesso: {', '.join(contexto.casos_sucesso)}
        - Tend√™ncias: {', '.join(contexto.tendencias)}
        
        ## TAREFA: CPL1 - A OPORTUNIDADE PARALISANTE
        
        Desenvolva o CPL1 seguindo esta estrutura:
        
        ### 1. DESTRUI√á√ÉO SISTEM√ÅTICA DE OBJE√á√ïES
        Use os dados de obje√ß√µes reais para destrui√ß√£o sistem√°tica de cada uma:
        {chr(10).join([f"- {obj}" for obj in contexto.objecoes])}
        
        ### 2. TEASER MAGN√âTICO
        Crie 5 vers√µes do teaser baseadas em frases EXATAS coletadas
        
        ### 3. HIST√ìRIA DE TRANSFORMA√á√ÉO
        Use casos de sucesso verificados para construir narrativa
        
        ### 4. ESTRUTURA DO CONTE√öDO
        - 3 loops abertos que s√≥ fecham no CPL4
        - 5 quebras de padr√£o baseadas em tend√™ncias
        - 10 formas diferentes de prova social com dados reais
        
        ### 5. ELEMENTOS CINEMATOGR√ÅFICOS
        - Abertura impactante (primeiros 30 segundos)
        - Desenvolvimento da tens√£o
        - Cl√≠max revelador
        - Gancho para CPL2
        
        Formato JSON:
        {{
            "titulo": "CPL1 - T√≠tulo espec√≠fico",
            "objetivo": "Objetivo claro",
            "conteudo_principal": "Conte√∫do detalhado",
            "loops_abertos": ["Loop 1", "Loop 2", "Loop 3"],
            "quebras_padrao": ["Quebra 1", "Quebra 2", "Quebra 3", "Quebra 4", "Quebra 5"],
            "provas_sociais": ["Prova 1", "Prova 2", "..."],
            "elementos_cinematograficos": ["Abertura", "Desenvolvimento", "Cl√≠max", "Gancho"],
            "gatilhos_psicologicos": ["Gatilho 1", "Gatilho 2", "..."],
            "call_to_action": "CTA espec√≠fico para CPL2"
        }}
        
        CR√çTICO: Cada elemento deve ser ESPEC√çFICO do nicho e baseado em dados reais coletados!
        """
        
        try:
            api = self.api_manager.get_active_api('qwen')
            if not api:
                _, api = self.api_manager.get_fallback_model('qwen')
            
            response = self._generate_with_ai(prompt, api)
            cpl1_data = json.loads(response)
            
            cpl1 = CPLDevastador(
                numero=1,
                titulo=cpl1_data['titulo'],
                objetivo=cpl1_data['objetivo'],
                conteudo_principal=cpl1_data['conteudo_principal'],
                loops_abertos=cpl1_data['loops_abertos'],
                quebras_padrao=cpl1_data['quebras_padrao'],
                provas_sociais=cpl1_data['provas_sociais'],
                elementos_cinematograficos=cpl1_data['elementos_cinematograficos'],
                gatilhos_psicologicos=cpl1_data['gatilhos_psicologicos'],
                call_to_action=cpl1_data['call_to_action']
            )
            
            # Salvar fase 2
            self._salvar_fase(session_id, 2, cpl1_data)
            
            logger.info("‚úÖ FASE 2 conclu√≠da: CPL1 - A Oportunidade Paralisante")
            return cpl1
            
        except Exception as e:
            logger.error(f"‚ùå Erro na Fase 2: {e}")
            raise
    
    async def _fase_3_cpl2_transformacao(self, session_id: str, contexto: ContextoEstrategico, cpl1: CPLDevastador) -> CPLDevastador:
        """
        FASE 3: CPL2 - A TRANSFORMA√á√ÉO IMPOSS√çVEL
        """
        prompt = f"""
        # PROTOCOLO DE GERA√á√ÉO DE CPLs DEVASTADORES - FASE 3: CPL2
        
        ## CONTINUIDADE DO CPL1
        - Loops abertos: {', '.join(cpl1.loops_abertos)}
        - Gatilhos estabelecidos: {', '.join(cpl1.gatilhos_psicologicos)}
        
        ## DADOS CONTEXTUAIS
        - Casos de sucesso: {', '.join(contexto.casos_sucesso)}
        - Obje√ß√µes a destruir: {', '.join(contexto.objecoes)}
        
        ## TAREFA: CPL2 - A TRANSFORMA√á√ÉO IMPOSS√çVEL
        
        ### 1. SELE√á√ÉO DE CASOS DE SUCESSO
        Selecione 5 casos de sucesso que cubram TODAS as obje√ß√µes:
        {chr(10).join([f"- {obj}" for obj in contexto.objecoes])}
        
        ### 2. TEASER MAGN√âTICO
        Crie 5 vers√µes do teaser baseadas em frases EXATAS coletadas
        
        ### 3. HIST√ìRIA DE TRANSFORMA√á√ÉO
        Use casos de sucesso verificados para construir narrativa
        
        ### 4. ESTRUTURA DO CONTE√öDO
        - 3 loops abertos que s√≥ fecham no CPL4
        - 5 quebras de padr√£o baseadas em tend√™ncias
        - 10 formas diferentes de prova social com dados reais
        
        ### 5. ELEMENTOS CINEMATOGR√ÅFICOS
        - Abertura impactante (primeiros 30 segundos)
        - Desenvolvimento da tens√£o
        - Cl√≠max revelador
        - Gancho para CPL3
        
        Formato JSON:
        {{
            "titulo": "CPL2 - T√≠tulo espec√≠fico",
            "objetivo": "Objetivo claro",
            "conteudo_principal": "Conte√∫do detalhado",
            "loops_abertos": ["Loop 1", "Loop 2", "Loop 3"],
            "quebras_padrao": ["Quebra 1", "Quebra 2", "Quebra 3", "Quebra 4", "Quebra 5"],
            "provas_sociais": ["Prova 1", "Prova 2", "..."],
            "elementos_cinematograficos": ["Abertura", "Desenvolvimento", "Cl√≠max", "Gancho"],
            "gatilhos_psicologicos": ["Gatilho 1", "Gatilho 2", "..."],
            "call_to_action": "CTA espec√≠fico para CPL3"
        }}
        
        CR√çTICO: Cada elemento deve ser ESPEC√çFICO do nicho e baseado em dados reais coletados!
        """
        
        try:
            api = self.api_manager.get_active_api('qwen')
            if not api:
                _, api = self.api_manager.get_fallback_model('qwen')
            
            response = self._generate_with_ai(prompt, api)
            cpl2_data = json.loads(response)
            
            cpl2 = CPLDevastador(
                numero=2,
                titulo=cpl2_data['titulo'],
                objetivo=cpl2_data['objetivo'],
                conteudo_principal=cpl2_data['conteudo_principal'],
                loops_abertos=cpl2_data['loops_abertos'],
                quebras_padrao=cpl2_data['quebras_padrao'],
                provas_sociais=cpl2_data['provas_sociais'],
                elementos_cinematograficos=cpl2_data['elementos_cinematograficos'],
                gatilhos_psicologicos=cpl2_data['gatilhos_psicologicos'],
                call_to_action=cpl2_data['call_to_action']
            )
            
            # Salvar fase 3
            self._salvar_fase(session_id, 3, cpl2_data)
            
            logger.info("‚úÖ FASE 3 conclu√≠da: CPL2 - A Transforma√ß√£o Imposs√≠vel")
            return cpl2
            
        except Exception as e:
            logger.error(f"‚ùå Erro na Fase 3: {e}")
            raise
    
    async def _fase_4_cpl3_caminho(self, session_id: str, contexto: ContextoEstrategico, cpl2: CPLDevastador) -> CPLDevastador:
        """
        FASE 4: CPL3 - O CAMINHO REVOLUCION√ÅRIO
        """
        prompt = f"""
        # PROTOCOLO DE GERA√á√ÉO DE CPLs DEVASTADORES - FASE 4: CPL3
        
        ## CONTINUIDADE DO CPL2
        - Loops abertos: {', '.join(cpl2.loops_abertos)}
        - Gatilhos estabelecidos: {', '.join(cpl2.gatilhos_psicologicos)}
        
        ## DADOS CONTEXTUAIS
        - Casos de sucesso: {', '.join(contexto.casos_sucesso)}
        - Obje√ß√µes a destruir: {', '.join(contexto.objecoes)}
        
        ## TAREFA: CPL3 - O CAMINHO REVOLUCION√ÅRIO
        
        ### 1. SELE√á√ÉO DE CASOS DE SUCESSO
        Selecione 5 casos de sucesso que cubram TODAS as obje√ß√µes:
        {chr(10).join([f"- {obj}" for obj in contexto.objecoes])}
        
        ### 2. TEASER MAGN√âTICO
        Crie 5 vers√µes do teaser baseadas em frases EXATAS coletadas
        
        ### 3. HIST√ìRIA DE TRANSFORMA√á√ÉO
        Use casos de sucesso verificados para construir narrativa
        
        ### 4. ESTRUTURA DO CONTE√öDO
        - 3 loops abertos que s√≥ fecham no CPL4
        - 5 quebras de padr√£o baseadas em tend√™ncias
        - 10 formas diferentes de prova social com dados reais
        
        ### 5. ELEMENTOS CINEMATOGR√ÅFICOS
        - Abertura impactante (primeiros 30 segundos)
        - Desenvolvimento da tens√£o
        - Cl√≠max revelador
        - Gancho para CPL4
        
        Formato JSON:
        {{
            "titulo": "CPL3 - T√≠tulo espec√≠fico",
            "objetivo": "Objetivo claro",
            "conteudo_principal": "Conte√∫do detalhado",
            "loops_abertos": ["Loop 1", "Loop 2", "Loop 3"],
            "quebras_padrao": ["Quebra 1", "Quebra 2", "Quebra 3", "Quebra 4", "Quebra 5"],
            "provas_sociais": ["Prova 1", "Prova 2", "..."],
            "elementos_cinematograficos": ["Abertura", "Desenvolvimento", "Cl√≠max", "Gancho"],
            "gatilhos_psicologicos": ["Gatilho 1", "Gatilho 2", "..."],
            "call_to_action": "CTA espec√≠fico para CPL4"
        }}
        
        CR√çTICO: Cada elemento deve ser ESPEC√çFICO do nicho e baseado em dados reais coletados!
        """
        
        try:
            api = self.api_manager.get_active_api('qwen')
            if not api:
                _, api = self.api_manager.get_fallback_model('qwen')
            
            response = self._generate_with_ai(prompt, api)
            cpl3_data = json.loads(response)
            
            cpl3 = CPLDevastador(
                numero=3,
                titulo=cpl3_data['titulo'],
                objetivo=cpl3_data['objetivo'],
                conteudo_principal=cpl3_data['conteudo_principal'],
                loops_abertos=cpl3_data['loops_abertos'],
                quebras_padrao=cpl3_data['quebras_padrao'],
                provas_sociais=cpl3_data['provas_sociais'],
                elementos_cinematograficos=cpl3_data['elementos_cinematograficos'],
                gatilhos_psicologicos=cpl3_data['gatilhos_psicologicos'],
                call_to_action=cpl3_data['call_to_action']
            )
            
            # Salvar fase 4
            self._salvar_fase(session_id, 4, cpl3_data)
            
            logger.info("‚úÖ FASE 4 conclu√≠da: CPL3 - O Caminho Revolucion√°rio")
            return cpl3
            
        except Exception as e:
            logger.error(f"‚ùå Erro na Fase 4: {e}")
            raise
    
    async def _fase_5_cpl4_decisao(self, session_id: str, contexto: ContextoEstrategico, cpl3: CPLDevastador) -> CPLDevastador:
        """
        FASE 5: CPL4 - A DECIS√ÉO INEVIT√ÅVEL
        """
        prompt = f"""
        # PROTOCOLO DE GERA√á√ÉO DE CPLs DEVASTADORES - FASE 5: CPL4
        
        ## CONTINUIDADE DO CPL3
        - Loops abertos: {', '.join(cpl3.loops_abertos)}
        - Gatilhos estabelecidos: {', '.join(cpl3.gatilhos_psicologicos)}
        
        ## DADOS CONTEXTUAIS
        - Casos de sucesso: {', '.join(contexto.casos_sucesso)}
        - Obje√ß√µes a destruir: {', '.join(contexto.objecoes)}
        
        ## TAREFA: CPL4 - A DECIS√ÉO INEVIT√ÅVEL
        
        ### 1. SELE√á√ÉO DE CASOS DE SUCESSO
        Selecione 5 casos de sucesso que cubram TODAS as obje√ß√µes:
        {chr(10).join([f"- {obj}" for obj in contexto.objecoes])}
        
        ### 2. TEASER MAGN√âTICO
        Crie 5 vers√µes do teaser baseadas em frases EXATAS coletadas
        
        ### 3. HIST√ìRIA DE TRANSFORMA√á√ÉO
        Use casos de sucesso verificados para construir narrativa
        
        ### 4. ESTRUTURA DO CONTE√öDO
        - 3 loops abertos que s√≥ fecham no CPL4
        - 5 quebras de padr√£o baseadas em tend√™ncias
        - 10 formas diferentes de prova social com dados reais
        
        ### 5. ELEMENTOS CINEMATOGR√ÅFICOS
        - Abertura impactante (primeiros 30 segundos)
        - Desenvolvimento da tens√£o
        - Cl√≠max revelador
        - Call to Action final
        
        Formato JSON:
        {{
            "titulo": "CPL4 - T√≠tulo espec√≠fico",
            "objetivo": "Objetivo claro",
            "conteudo_principal": "Conte√∫do detalhado",
            "loops_abertos": ["Loop 1", "Loop 2", "Loop 3"],
            "quebras_padrao": ["Quebra 1", "Quebra 2", "Quebra 3", "Quebra 4", "Quebra 5"],
            "provas_sociais": ["Prova 1", "Prova 2", "..."],
            "elementos_cinematograficos": ["Abertura", "Desenvolvimento", "Cl√≠max", "Call to Action final"],
            "gatilhos_psicologicos": ["Gatilho 1", "Gatilho 2", "..."],
            "call_to_action": "CTA espec√≠fico para a decis√£o final"
        }}
        
        CR√çTICO: Cada elemento deve ser ESPEC√çFICO do nicho e baseado em dados reais coletados!
        """
        
        try:
            api = self.api_manager.get_active_api('qwen')
            if not api:
                _, api = self.api_manager.get_fallback_model('qwen')
            
            response = self._generate_with_ai(prompt, api)
            cpl4_data = json.loads(response)
            
            cpl4 = CPLDevastador(
                numero=4,
                titulo=cpl4_data['titulo'],
                objetivo=cpl4_data['objetivo'],
                conteudo_principal=cpl4_data['conteudo_principal'],
                loops_abertos=cpl4_data['loops_abertos'],
                quebras_padrao=cpl4_data['quebras_padrao'],
                provas_sociais=cpl4_data['provas_sociais'],
                elementos_cinematograficos=cpl4_data['elementos_cinematograficos'],
                gatilhos_psicologicos=cpl4_data['gatilhos_psicologicos'],
                call_to_action=cpl4_data['call_to_action']
            )
            
            # Salvar fase 5
            self._salvar_fase(session_id, 5, cpl4_data)
            
            logger.info("‚úÖ FASE 5 conclu√≠da: CPL4 - A Decis√£o Inevit√°vel")
            return cpl4
            
        except Exception as e:
            logger.error(f"‚ùå Erro na Fase 5: {e}")
            raise

    def _generate_with_ai(self, prompt: str, api: Any) -> str:
        # Placeholder para a fun√ß√£o de gera√ß√£o de IA
        # Esta fun√ß√£o deve ser implementada para interagir com a API de IA real
        # Por enquanto, retorna um JSON de exemplo
        if "FASE 1" in prompt:
            return json.dumps({
                "versao_escolhida": "A",
                "nome_evento": "Imers√£o Mente Milion√°ria",
                "promessa_central": "Transforme 100% da sua mentalidade financeira em 7 dias, garantido ou seu dinheiro de volta.",
                "arquitetura_cpls": {
                    "cpl1": "A Oportunidade Paralisante: Desvendando a Matriz da Escassez",
                    "cpl2": "A Transforma√ß√£o Imposs√≠vel: O Salto Qu√¢ntico da Riqueza",
                    "cpl3": "O Caminho Revolucion√°rio: A Rota Secreta dos Bilion√°rios",
                    "cpl4": "A Decis√£o Inevit√°vel: O Chamado para a Abund√¢ncia"
                },
                "mapeamento_psicologico": {
                    "gatilho_principal": "Medo da escassez e desejo de liberdade financeira.",
                    "jornada_emocional": "Da frustra√ß√£o √† esperan√ßa, da d√∫vida √† certeza, da paralisia √† a√ß√£o.",
                    "pontos_pressao": ["D√≠vidas crescentes", "Sal√°rio insuficiente", "Falta de reconhecimento financeiro"]
                },
                "justificativa": "Esta vers√£o √© devastadora porque ataca diretamente o medo mais profundo do p√∫blico (escassez) e oferece uma promessa ousada e um caminho claro para a liberdade financeira, criando um FOMO irresist√≠vel."
            })
        elif "FASE 2" in prompt:
            return json.dumps({
                "titulo": "CPL1 - Desvendando a Matriz da Escassez",
                "objetivo": "Quebrar as cren√ßas limitantes sobre dinheiro e abrir a mente para novas possibilidades.",
                "conteudo_principal": "Neste CPL, vamos expor as mentiras que te contaram sobre dinheiro e como elas te mant√™m preso na matriz da escassez. Voc√™ vai descobrir que a riqueza n√£o √© para poucos, mas sim um direito seu. Apresentaremos provas irrefut√°veis e hist√≥rias de transforma√ß√£o que v√£o te chocar.",
                "loops_abertos": ["Qual o segredo dos milion√°rios que ningu√©m te conta?", "Como transformar sua d√≠vida em um trampolim para a riqueza?", "A verdade chocante sobre o sistema financeiro que te mant√©m pobre."],
                "quebras_padrao": ["O dinheiro n√£o √© a raiz de todo mal, mas a falta dele sim.", "Trabalhar duro n√£o te deixa rico, mas trabalhar de forma inteligente sim.", "Aposentadoria n√£o √© um destino, mas uma escolha.", "Investir n√£o √© para ricos, mas para quem quer ficar rico.", "A crise n√£o √© um problema, mas uma oportunidade."],
                "provas_sociais": ["Jo√£o, que saiu das d√≠vidas e hoje fatura 6 d√≠gitos.", "Maria, que transformou seu sal√°rio em um imp√©rio financeiro.", "Empresa X, que cresceu 300% em meio √† crise.", "Estudo da Universidade Y que comprova a efic√°cia do m√©todo.", "Depoimento de Z√©, que antes era c√©tico e hoje √© milion√°rio.", "Reportagem da revista W sobre o sucesso do nosso m√©todo.", "Gr√°fico que mostra o crescimento exponencial dos nossos alunos.", "Testemunho de Ana, que alcan√ßou a liberdade financeira em 1 ano.", "Case de sucesso da empresa K, que implementou nosso m√©todo e dobrou o faturamento.", "Dados do mercado que comprovam a tend√™ncia de crescimento do nosso nicho."],
                "elementos_cinematograficos": ["Abertura com uma cena de desespero financeiro e a promessa de uma solu√ß√£o.", "Desenvolvimento com a exposi√ß√£o das mentiras e a apresenta√ß√£o das verdades.", "Cl√≠max com a revela√ß√£o do segredo dos milion√°rios.", "Gancho para o CPL2: 'No pr√≥ximo CPL, voc√™ vai descobrir como dar o salto qu√¢ntico da riqueza, mesmo que voc√™ n√£o acredite ser poss√≠vel.'"],
                "gatilhos_psicologicos": ["Curiosidade", "Medo", "Esperan√ßa", "Autoridade", "Prova Social", "Escassez"],
                "call_to_action": "Clique aqui para o CPL2 e descubra como dar o salto qu√¢ntico da riqueza!"
            })
        elif "FASE 3" in prompt:
            return json.dumps({
                "titulo": "CPL2 - O Salto Qu√¢ntico da Riqueza",
                "objetivo": "Apresentar o m√©todo inovador que permite a qualquer pessoa alcan√ßar a riqueza, independentemente da sua situa√ß√£o atual.",
                "conteudo_principal": "Neste CPL, vamos te mostrar o passo a passo do nosso m√©todo revolucion√°rio que j√° transformou a vida de milhares de pessoas. Voc√™ vai aprender a identificar oportunidades, multiplicar seu dinheiro e construir um futuro financeiro s√≥lido. Prepare-se para um salto qu√¢ntico na sua vida!",
                "loops_abertos": ["Como o m√©todo X pode te fazer ganhar dinheiro dormindo?", "A estrat√©gia secreta dos investidores de sucesso revelada.", "Por que a maioria das pessoas nunca alcan√ßa a riqueza e como voc√™ pode ser diferente."],
                "quebras_padrao": ["N√£o √© preciso ter muito dinheiro para come√ßar a investir.", "Voc√™ n√£o precisa ser um g√™nio para entender o mercado financeiro.", "A riqueza n√£o √© sorte, mas estrat√©gia.", "O fracasso n√£o √© o fim, mas um degrau para o sucesso.", "A crise √© a melhor √©poca para investir."],
                "provas_sociais": ["Depoimento de Carlos, que triplicou seu patrim√¥nio em 6 meses.", "Case de sucesso da startup Y, que recebeu investimento milion√°rio ap√≥s aplicar nosso m√©todo.", "Entrevista com a especialista Z, que valida a efic√°cia do nosso m√©todo.", "Gr√°fico que mostra o retorno sobre investimento dos nossos alunos.", "Testemunho de Bia, que saiu do zero e hoje vive de renda passiva.", "Reportagem da TV sobre o impacto do nosso m√©todo na economia.", "Dados que comprovam a seguran√ßa e rentabilidade dos nossos investimentos.", "Testemunho de Pedro, que se aposentou aos 40 anos gra√ßas ao nosso m√©todo.", "Case de sucesso da empresa W, que se tornou l√≠der de mercado ap√≥s adotar nossa estrat√©gia.", "Dados do Banco Central que mostram o crescimento do mercado de investimentos."],
                "elementos_cinematograficos": ["Abertura com a promessa de um salto qu√¢ntico e a apresenta√ß√£o do m√©todo.", "Desenvolvimento com a explica√ß√£o do passo a passo e os benef√≠cios.", "Cl√≠max com a revela√ß√£o dos segredos dos investidores de sucesso.", "Gancho para o CPL3: 'No pr√≥ximo CPL, voc√™ vai descobrir como dar o salto qu√¢ntico da riqueza, mesmo que voc√™ n√£o acredite ser poss√≠vel.'"],
                "gatilhos_psicologicos": ["Novidade", "Gan√¢ncia", "Exclusividade", "Prova Social", "Autoridade", "Urg√™ncia"],
                "call_to_action": "Clique aqui para o CPL3 e descubra o caminho revolucion√°rio para a riqueza!"
            })
        elif "FASE 4" in prompt:
            return json.dumps({
                "titulo": "CPL3 - O Caminho Revolucion√°rio",
                "objetivo": "Apresentar o plano de a√ß√£o detalhado para que o p√∫blico possa aplicar o m√©todo e alcan√ßar a riqueza de forma consistente.",
                "conteudo_principal": "Neste CPL, vamos te entregar o mapa da mina para a riqueza. Voc√™ vai aprender a criar um plano de a√ß√£o personalizado, identificar as melhores oportunidades de investimento e blindar seu patrim√¥nio contra crises. Chegou a hora de trilhar o caminho revolucion√°rio para a liberdade financeira!",
                "loops_abertos": ["Como criar um plano de riqueza em apenas 1 hora por dia?", "Os 3 erros fatais que a maioria dos investidores comete e como evit√°-los.", "A f√≥rmula secreta para multiplicar seu dinheiro em tempo recorde."],
                "quebras_padrao": ["N√£o √© preciso ser um expert em finan√ßas para investir com sucesso.", "Voc√™ n√£o precisa de muito tempo para gerenciar seus investimentos.", "A diversifica√ß√£o √© a chave para a seguran√ßa financeira.", "A paci√™ncia √© uma virtude no mundo dos investimentos.", "Aprender com os erros √© fundamental para o sucesso."],
                "provas_sociais": ["Depoimento de Fernanda, que construiu um patrim√¥nio s√≥lido em 2 anos.", "Case de sucesso da fam√≠lia Silva, que alcan√ßou a independ√™ncia financeira.", "Entrevista com o guru financeiro G, que recomenda nosso m√©todo.", "Gr√°fico que mostra a rentabilidade dos nossos planos de investimento.", "Testemunho de Rafa, que saiu do vermelho e hoje tem uma vida de abund√¢ncia.", "Reportagem da Forbes sobre o nosso impacto no mercado financeiro.", "Dados que comprovam a seguran√ßa e rentabilidade dos nossos planos.", "Testemunho de Lucas, que se tornou um investidor de sucesso em pouco tempo.", "Case de sucesso da empresa M, que implementou nosso plano e cresceu exponencialmente.", "Dados do mercado que mostram a tend√™ncia de crescimento do nosso setor."],
                "elementos_cinematograficos": ["Abertura com a promessa de um caminho revolucion√°rio e a apresenta√ß√£o do plano de a√ß√£o.", "Desenvolvimento com a explica√ß√£o do mapa da mina e os segredos dos investidores de sucesso.", "Cl√≠max com a revela√ß√£o da f√≥rmula secreta para multiplicar dinheiro.", "Gancho para o CPL4: 'No pr√≥ximo CPL, voc√™ vai descobrir como tomar a decis√£o inevit√°vel que vai mudar sua vida para sempre.'"],
                "gatilhos_psicologicos": ["Curiosidade", "Gan√¢ncia", "Exclusividade", "Prova Social", "Autoridade", "Urg√™ncia"],
                "call_to_action": "Clique aqui para o CPL4 e descubra como tomar a decis√£o inevit√°vel!"
            })
        elif "FASE 5" in prompt:
            return json.dumps({
                "titulo": "CPL4 - A Decis√£o Inevit√°vel",
                "objetivo": "Levar o p√∫blico a tomar a decis√£o de investir no programa completo e iniciar sua jornada rumo √† riqueza.",
                "conteudo_principal": "Chegamos ao momento da decis√£o. Voc√™ viu o problema, a solu√ß√£o e o caminho. Agora, √© hora de agir. Apresentaremos o programa completo, com todos os b√¥nus e garantias, e te daremos a oportunidade de mudar sua vida para sempre. A decis√£o √© sua, mas o futuro te espera!",
                "loops_abertos": ["Qual o valor da sua liberdade financeira?", "O que te impede de alcan√ßar a riqueza que voc√™ merece?", "A √∫ltima chance de mudar sua vida para sempre."],
                "quebras_padrao": ["N√£o √© um gasto, mas um investimento no seu futuro.", "Voc√™ n√£o est√° sozinho, ter√° todo o suporte necess√°rio.", "O risco √© zero, a garantia √© total.", "O tempo √© agora, n√£o h√° amanh√£.", "A oportunidade √© √∫nica, n√£o perca."],
                "provas_sociais": ["Depoimento de Jo√£o, que se tornou milion√°rio ap√≥s o programa.", "Case de sucesso da turma anterior, que teve 100% de aprova√ß√£o.", "Entrevista com o CEO da empresa, que garante a qualidade do programa.", "Gr√°fico que mostra o retorno sobre investimento dos nossos alunos.", "Testemunho de Maria, que transformou sua vida financeira em 3 meses.", "Reportagem da TV sobre o sucesso do nosso programa.", "Dados que comprovam a efic√°cia do nosso programa.", "Testemunho de Pedro, que saiu do zero e hoje √© um investidor de sucesso.", "Case de sucesso da empresa X, que se tornou parceira do nosso programa.", "Dados do mercado que mostram a demanda crescente por educa√ß√£o financeira."],
                "elementos_cinematograficos": ["Abertura com a recapitula√ß√£o dos CPLs anteriores e a chamada para a decis√£o.", "Desenvolvimento com a apresenta√ß√£o do programa completo, b√¥nus e garantias.", "Cl√≠max com a oferta irresist√≠vel e a escassez.", "Call to Action final: 'Clique aqui e garanta sua vaga no programa que vai mudar sua vida para sempre!'"],
                "gatilhos_psicologicos": ["Urg√™ncia", "Escassez", "Medo da Perda", "Gan√¢ncia", "Prova Social", "Autoridade"],
                "call_to_action": "Clique aqui e garanta sua vaga no programa que vai mudar sua vida para sempre!"
            })
        else:
            return json.dumps({"error": "Prompt n√£o reconhecido para gera√ß√£o de IA."})

    def _salvar_dados_contextuais(self, session_id: str, search_results: Any, contexto: ContextoEstrategico):
        # Placeholder para salvar dados contextuais
        self.session_data[session_id] = {
            "search_results": search_results.__dict__,
            "contexto": asdict(contexto)
        }
        logger.info(f"Dados contextuais salvos para a sess√£o {session_id}")

    def _validar_dados_coletados(self, session_id: str) -> bool:
        # Placeholder para valida√ß√£o de dados
        return True

    def _salvar_fase(self, session_id: str, fase_numero: int, data: Dict[str, Any]):
        # Placeholder para salvar dados da fase
        if session_id not in self.session_data:
            self.session_data[session_id] = {}
        self.session_data[session_id][f"fase_{fase_numero}"] = data
        logger.info(f"Dados da fase {fase_numero} salvos para a sess√£o {session_id}")

    def _salvar_resultado_final(self, session_id: str, resultado: Dict[str, Any]):
        # Placeholder para salvar resultado final
        self.session_data[session_id]["resultado_final"] = resultado
        logger.info(f"Resultado final salvo para a sess√£o {session_id}")


async def create_devastating_cpl_protocol():
    return CPLDevastadorProtocol()


